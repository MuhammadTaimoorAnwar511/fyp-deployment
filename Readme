cd AWS
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
python bot.py
===
cd AWS
source venv/bin/activate
python weighted_sentiment_api.py
===
cd Frontend
npm i
npm start
===
cd Backend
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
flask run --reload
===
cd Frontend
npm install cypress --save-dev
npx cypress open
===######
/**
 * E2E:  Login → Save Exchange Connection → Delete Exchange Connection
 *
 * 1. Logs in with real /auth/login request
 * 2. Fills Bybit API key + secret and clicks Save
 * 3. Waits for /exchange/SaveConnection (PUT) → 200 and profile reload
 * 4. Verifies the success toast and that the Save button disappears
 * 5. Clicks Delete → confirms in the modal
 * 6. Waits for /exchange/DeleteConnection (DELETE) → 200 and profile reload
 * 7. Verifies the deletion toast and that the form is cleared again
 */

describe('Login → Save → Delete Bybit connection', () => {
  // ---------- CONFIG ----------
  const UI_BASE  = 'http://localhost:3000';
  const API_BASE = 'http://localhost:5000';

  const email    = 'testuser@example.com';
  const password = 'Testpassword@123';

  // Valid Bybit sub-account keys to store
  const apiKey    = 'FVxJssLNFyUgq5OTyt';
  const apiSecret = '3PstkL6fJ6vkyTOPCPR0jIGOaoeQQdBv6sDl';

  it('creates then removes a Bybit connection', () => {
    //------------------------------------------------
    // 1.  Log in
    //------------------------------------------------
    cy.intercept('POST', '**/auth/login').as('loginReq');

    cy.visit(`${UI_BASE}/login`);
    cy.get('input[type="email"]').type(email);
    cy.get('input[type="password"]').type(password);
    cy.contains('button', /^log in$/i).click();

    cy.wait('@loginReq').its('response.statusCode').should('eq', 200);

    //------------------------------------------------
    // 2.  Go to Profile
    //------------------------------------------------
    cy.visit(`${UI_BASE}/Profile`);

    // prepare intercepts for save + profile refresh
    cy.intercept('PUT', '**/exchange/SaveConnection').as('saveConn');
    cy.intercept('GET', '**/profile').as('profileReload');

    //------------------------------------------------
    // 3.  Save the connection
    //------------------------------------------------
    cy.get('#apiKey').clear().type(apiKey);
    cy.get('#secretKey').clear().type(apiSecret);
    cy.contains('button', /^save$/i).click();

    cy.wait('@saveConn').its('response.statusCode').should('eq', 200);
    cy.wait('@profileReload');

    cy.contains(/exchange details updated successfully!?/i, { timeout: 8000 })
      .should('be.visible');

    cy.contains('button', /^save$/i).should('not.exist'); // Save button gone/disabled

    //------------------------------------------------
    // 4.  Delete the connection we just created
    //------------------------------------------------
    cy.intercept('DELETE', '**/exchange/DeleteConnection').as('deleteConn');

    // Click red Delete button on the card
    cy.contains('button', /^delete$/i).first().click({ force: true });

    // Confirm inside the modal
    cy.contains('div', /confirm deletion/i)
      .parent()                // modal wrapper
      .within(() => {
        cy.contains('button', /^delete$/i).click({ force: true });
      });

    cy.wait('@deleteConn').its('response.statusCode').should('eq', 200);
    cy.wait('@profileReload');

    cy.contains(/exchange connection deleted successfully!?/i, { timeout: 8000 })
      .should('be.visible');

    // Form should be reset (apiKey input empty again)
    cy.get('#apiKey').should('have.value', '');
    cy.get('#secretKey').should('have.value', '');
  });
});
